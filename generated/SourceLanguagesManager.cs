// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSourceView {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[SourceLanguagesManager]
	public class SourceLanguagesManager : GLib.Object {

		[Obsolete]
		protected SourceLanguagesManager(GLib.GType gtype) : base(gtype) {}
		public SourceLanguagesManager(IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_languages_manager_new();

		public SourceLanguagesManager () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SourceLanguagesManager)) {
				CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
				return;
			}
			owned = true;
			Raw = gtk_source_languages_manager_new();
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_languages_manager_get_lang_files_dirs(IntPtr raw);

		[GLib.Property ("lang_files_dirs")]
		public GLib.SList LangFilesDirs {
			get  {
				IntPtr raw_ret = gtk_source_languages_manager_get_lang_files_dirs(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_languages_manager_get_language_from_mime_type(IntPtr raw, IntPtr mime_type);

		public GtkSourceView.SourceLanguage GetLanguageFromMimeType(string mime_type) {
			IntPtr native_mime_type = GLib.Marshaller.StringToPtrGStrdup (mime_type);
			IntPtr raw_ret = gtk_source_languages_manager_get_language_from_mime_type(Handle, native_mime_type);
			GtkSourceView.SourceLanguage ret = GLib.Object.GetObject(raw_ret) as GtkSourceView.SourceLanguage;
			GLib.Marshaller.Free (native_mime_type);
			return ret;
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_languages_manager_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_source_languages_manager_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}


		static SourceLanguagesManager ()
		{
			GtkSharp.GtksourceviewSharp.ObjectManager.Initialize ();
		}
#endregion
#region Customized extensions
#line 1 "SourceLanguagesManager.custom"

		[DllImport("gtksourceview-1.0")]
		static extern IntPtr gtk_source_languages_manager_get_available_languages(IntPtr raw);
                                                                                
		public SourceLanguage[] AvailableLanguages {
			get {
				IntPtr raw_ret = gtk_source_languages_manager_get_available_languages(Handle);
				GLib.SList list = new GLib.SList(raw_ret);
				SourceLanguage[] result = new SourceLanguage [list.Count];
				for (int i = 0; i < list.Count; i++)
					result  [i] = list [i] as SourceLanguage;
				return result;
				
			}
		}

#endregion
	}

	internal class SourceLanguagesManagerAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_languages_manager_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_source_languages_manager_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}

// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSourceView {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[SourceUndoManager]
	public class SourceUndoManager : GLib.Object {

		[Obsolete]
		protected SourceUndoManager(GLib.GType gtype) : base(gtype) {}
		public SourceUndoManager(IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_undo_manager_new(IntPtr buffer);

		public SourceUndoManager (Gtk.TextBuffer buffer) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SourceUndoManager)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			owned = true;
			Raw = gtk_source_undo_manager_new(buffer == null ? IntPtr.Zero : buffer.Handle);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CanRedoFiredVMDelegate (IntPtr um, bool can_redo);

		static CanRedoFiredVMDelegate CanRedoFiredVMCallback;

		static void canredofired_cb (IntPtr um, bool can_redo)
		{
			try {
				SourceUndoManager um_managed = GLib.Object.GetObject (um, false) as SourceUndoManager;
				um_managed.OnCanRedoFired (can_redo);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideCanRedoFired (GLib.GType gtype)
		{
			if (CanRedoFiredVMCallback == null)
				CanRedoFiredVMCallback = new CanRedoFiredVMDelegate (canredofired_cb);
			OverrideVirtualMethod (gtype, "can_redo", CanRedoFiredVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSourceView.SourceUndoManager), ConnectionMethod="OverrideCanRedoFired")]
		protected virtual void OnCanRedoFired (bool can_redo)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (can_redo)) {
				inst_and_params.Append (val1);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
				}
			}
		}

		[GLib.Signal("can_redo")]
		public event GtkSourceView.CanRedoFiredHandler CanRedoFired {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "can_redo", typeof (GtkSourceView.CanRedoFiredArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "can_redo", typeof (GtkSourceView.CanRedoFiredArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CanUndoFiredVMDelegate (IntPtr um, bool can_undo);

		static CanUndoFiredVMDelegate CanUndoFiredVMCallback;

		static void canundofired_cb (IntPtr um, bool can_undo)
		{
			try {
				SourceUndoManager um_managed = GLib.Object.GetObject (um, false) as SourceUndoManager;
				um_managed.OnCanUndoFired (can_undo);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideCanUndoFired (GLib.GType gtype)
		{
			if (CanUndoFiredVMCallback == null)
				CanUndoFiredVMCallback = new CanUndoFiredVMDelegate (canundofired_cb);
			OverrideVirtualMethod (gtype, "can_undo", CanUndoFiredVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSourceView.SourceUndoManager), ConnectionMethod="OverrideCanUndoFired")]
		protected virtual void OnCanUndoFired (bool can_undo)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (can_undo)) {
				inst_and_params.Append (val1);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
				}
			}
		}

		[GLib.Signal("can_undo")]
		public event GtkSourceView.CanUndoFiredHandler CanUndoFired {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "can_undo", typeof (GtkSourceView.CanUndoFiredArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "can_undo", typeof (GtkSourceView.CanUndoFiredArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_undo_manager_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_source_undo_manager_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_undo_manager_can_undo(IntPtr raw);

		public bool CanUndo() {
			bool raw_ret = gtk_source_undo_manager_can_undo(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_undo_manager_end_not_undoable_action(IntPtr raw);

		public void EndNotUndoableAction() {
			gtk_source_undo_manager_end_not_undoable_action(Handle);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_undo_manager_get_max_undo_levels(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_undo_manager_set_max_undo_levels(IntPtr raw, int undo_levels);

		public int MaxUndoLevels { 
			get {
				int raw_ret = gtk_source_undo_manager_get_max_undo_levels(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				gtk_source_undo_manager_set_max_undo_levels(Handle, value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_undo_manager_begin_not_undoable_action(IntPtr raw);

		public void BeginNotUndoableAction() {
			gtk_source_undo_manager_begin_not_undoable_action(Handle);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_undo_manager_undo(IntPtr raw);

		public void Undo() {
			gtk_source_undo_manager_undo(Handle);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_undo_manager_can_redo(IntPtr raw);

		public bool CanRedo() {
			bool raw_ret = gtk_source_undo_manager_can_redo(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_undo_manager_redo(IntPtr raw);

		public void Redo() {
			gtk_source_undo_manager_redo(Handle);
		}


		static SourceUndoManager ()
		{
			GtkSharp.GtksourceviewSharp.ObjectManager.Initialize ();
		}
#endregion
	}

	internal class SourceUndoManagerAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_undo_manager_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_source_undo_manager_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}

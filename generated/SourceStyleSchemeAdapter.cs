// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSourceView {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class SourceStyleSchemeAdapter : GLib.GInterfaceAdapter, GtkSourceView.SourceStyleScheme {

		static SourceStyleSchemeIface iface;

		struct SourceStyleSchemeIface {
			public IntPtr gtype;
			public IntPtr itype;

			public IntPtr style_changed;
			public GetTagStyleDelegate get_tag_style;
			public IntPtr get_style_names;
		}

		static SourceStyleSchemeAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(SourceStyleSchemeAdapter));
			iface.get_tag_style = new GetTagStyleDelegate (GetTagStyleCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetTagStyleDelegate (IntPtr scheme, IntPtr style_name);

		static IntPtr GetTagStyleCallback (IntPtr scheme, IntPtr style_name)
		{
			try {
				GtkSourceView.SourceStyleSchemeImplementor __obj = GLib.Object.GetObject (scheme, false) as GtkSourceView.SourceStyleSchemeImplementor;
				GtkSourceView.SourceTagStyle __result = __obj.GetTagStyle (GLib.Marshaller.Utf8PtrToString (style_name));
				return GLib.Marshaller.StructureToPtrAlloc<GtkSourceView.SourceTagStyle> (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			SourceStyleSchemeIface native_iface = Marshal.PtrToStructure<SourceStyleSchemeIface> (ifaceptr);
			native_iface.get_tag_style = iface.get_tag_style;
			native_iface.get_style_names = iface.get_style_names;
			Marshal.StructureToPtr<SourceStyleSchemeIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public SourceStyleSchemeAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		SourceStyleSchemeImplementor implementor;

		public SourceStyleSchemeAdapter (SourceStyleSchemeImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public SourceStyleSchemeAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_get_type();

		private static GLib.GType _gtype = new GLib.GType (gtk_source_style_scheme_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static SourceStyleScheme GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static SourceStyleScheme GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is SourceStyleSchemeImplementor)
				return new SourceStyleSchemeAdapter (obj as SourceStyleSchemeImplementor);
			else if (obj as SourceStyleScheme == null)
				return new SourceStyleSchemeAdapter (obj.Handle);
			else
				return obj as SourceStyleScheme;
		}

		public SourceStyleSchemeImplementor Implementor {
			get {
				return implementor;
			}
		}

		[GLib.Signal("style_changed")]
		public event GtkSourceView.StyleChangedHandler StyleChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "style_changed", typeof (GtkSourceView.StyleChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "style_changed", typeof (GtkSourceView.StyleChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = gtk_source_style_scheme_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_get_tag_style(IntPtr raw, IntPtr style_name);

		public GtkSourceView.SourceTagStyle GetTagStyle(string style_name) {
			IntPtr native_style_name = GLib.Marshaller.StringToPtrGStrdup (style_name);
			IntPtr raw_ret = gtk_source_style_scheme_get_tag_style(Handle, native_style_name);
			GtkSourceView.SourceTagStyle ret = GtkSourceView.SourceTagStyle.New (raw_ret);
			GLib.Marshaller.Free (native_style_name);
			return ret;
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_get_default();

		public static GtkSourceView.SourceStyleScheme Default { 
			get {
				IntPtr raw_ret = gtk_source_style_scheme_get_default();
				GtkSourceView.SourceStyleScheme ret = GtkSourceView.SourceStyleSchemeAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

#endregion
#region Customized extensions
#line 1 "SourceStyleSchemeAdapter.custom"

		[DllImport ("libgtksourceview-1.0")]
		static extern IntPtr gtk_source_style_scheme_get_style_names (IntPtr handle);

		public string[] StyleNames {
                        get {
				return (string[]) GLib.Marshaller.ListToArray (new GLib.SList (gtk_source_style_scheme_get_style_names (Handle), typeof(string), false, false), typeof (string));
			}
                }

#endregion
	}
}

// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSourceView {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[SourceBuffer]
	public class SourceBuffer : Gtk.TextBuffer {

		[Obsolete]
		protected SourceBuffer(GLib.GType gtype) : base(gtype) {}
		public SourceBuffer(IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_new(IntPtr table);

		public SourceBuffer (GtkSourceView.SourceTagTable table) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SourceBuffer)) {
				var vals = new GLib.Value[1];
				var names = new IntPtr[1];
				var param_count = 0;
				if (table != null) {
					names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("tag-table");
					vals[param_count++] = new GLib.Value (table);
				}
				CreateNativeObject (names, vals, param_count);
				return;
			}
			owned = true;
			Raw = gtk_source_buffer_new(table == null ? IntPtr.Zero : table.Handle);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_new_with_language(IntPtr language);

		public SourceBuffer (GtkSourceView.SourceLanguage language) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SourceBuffer)) {
				var vals = new GLib.Value[1];
				var names = new IntPtr[1];
				var param_count = 0;
				if (language != null) {
					names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("language");
					vals[param_count++] = new GLib.Value (language);
				}
				CreateNativeObject (names, vals, param_count);
				return;
			}
			owned = true;
			Raw = gtk_source_buffer_new_with_language(language == null ? IntPtr.Zero : language.Handle);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_get_language(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_set_language(IntPtr raw, IntPtr language);

		[GLib.Property ("language")]
		public GtkSourceView.SourceLanguage Language {
			get  {
				IntPtr raw_ret = gtk_source_buffer_get_language(Handle);
				GtkSourceView.SourceLanguage ret = GLib.Object.GetObject(raw_ret) as GtkSourceView.SourceLanguage;
				return ret;
			}
			set  {
				gtk_source_buffer_set_language(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_buffer_get_check_brackets(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_set_check_brackets(IntPtr raw, bool check_brackets);

		[GLib.Property ("check_brackets")]
		public bool CheckBrackets {
			get  {
				bool raw_ret = gtk_source_buffer_get_check_brackets(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_buffer_set_check_brackets(Handle, value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_buffer_get_highlight(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_set_highlight(IntPtr raw, bool highlight);

		[GLib.Property ("highlight")]
		public bool Highlight {
			get  {
				bool raw_ret = gtk_source_buffer_get_highlight(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_buffer_set_highlight(Handle, value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_buffer_get_max_undo_levels(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_set_max_undo_levels(IntPtr raw, int max_undo_levels);

		[GLib.Property ("max_undo_levels")]
		public int MaxUndoLevels {
			get  {
				int raw_ret = gtk_source_buffer_get_max_undo_levels(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_buffer_set_max_undo_levels(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MarkerUpdatedVMDelegate (IntPtr buffer, IntPtr wh3r3);

		static MarkerUpdatedVMDelegate MarkerUpdatedVMCallback;

		static void markerupdated_cb (IntPtr buffer, IntPtr wh3r3)
		{
			try {
				SourceBuffer buffer_managed = GLib.Object.GetObject (buffer, false) as SourceBuffer;
				buffer_managed.OnMarkerUpdated (Gtk.TextIter.New (wh3r3));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideMarkerUpdated (GLib.GType gtype)
		{
			if (MarkerUpdatedVMCallback == null)
				MarkerUpdatedVMCallback = new MarkerUpdatedVMDelegate (markerupdated_cb);
			OverrideVirtualMethod (gtype, "marker_updated", MarkerUpdatedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSourceView.SourceBuffer), ConnectionMethod="OverrideMarkerUpdated")]
		protected virtual void OnMarkerUpdated (Gtk.TextIter wh3r3)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (wh3r3)) {
				inst_and_params.Append (val1);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
				}
			}
		}

		[GLib.Signal("marker_updated")]
		public event GtkSourceView.MarkerUpdatedHandler MarkerUpdated {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "marker_updated", typeof (GtkSourceView.MarkerUpdatedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "marker_updated", typeof (GtkSourceView.MarkerUpdatedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void HighlightUpdatedVMDelegate (IntPtr buffer, IntPtr start, IntPtr end);

		static HighlightUpdatedVMDelegate HighlightUpdatedVMCallback;

		static void highlightupdated_cb (IntPtr buffer, IntPtr start, IntPtr end)
		{
			try {
				SourceBuffer buffer_managed = GLib.Object.GetObject (buffer, false) as SourceBuffer;
				buffer_managed.OnHighlightUpdated (Gtk.TextIter.New (start), Gtk.TextIter.New (end));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideHighlightUpdated (GLib.GType gtype)
		{
			if (HighlightUpdatedVMCallback == null)
				HighlightUpdatedVMCallback = new HighlightUpdatedVMDelegate (highlightupdated_cb);
			OverrideVirtualMethod (gtype, "highlight_updated", HighlightUpdatedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSourceView.SourceBuffer), ConnectionMethod="OverrideHighlightUpdated")]
		protected virtual void OnHighlightUpdated (Gtk.TextIter start, Gtk.TextIter end)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (start)) {
				inst_and_params.Append (val1);
					using (var val2 = new GLib.Value (end)) {
					inst_and_params.Append (val2);
					g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
					}
				}
			}
		}

		[GLib.Signal("highlight_updated")]
		public event GtkSourceView.HighlightUpdatedHandler HighlightUpdated {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "highlight_updated", typeof (GtkSourceView.HighlightUpdatedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "highlight_updated", typeof (GtkSourceView.HighlightUpdatedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CanUndoFiredVMDelegate (IntPtr buffer, bool can_undo);

		static CanUndoFiredVMDelegate CanUndoFiredVMCallback;

		static void canundofired_cb (IntPtr buffer, bool can_undo)
		{
			try {
				SourceBuffer buffer_managed = GLib.Object.GetObject (buffer, false) as SourceBuffer;
				buffer_managed.OnCanUndoFired (can_undo);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideCanUndoFired (GLib.GType gtype)
		{
			if (CanUndoFiredVMCallback == null)
				CanUndoFiredVMCallback = new CanUndoFiredVMDelegate (canundofired_cb);
			OverrideVirtualMethod (gtype, "can_undo", CanUndoFiredVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSourceView.SourceBuffer), ConnectionMethod="OverrideCanUndoFired")]
		protected virtual void OnCanUndoFired (bool can_undo)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (can_undo)) {
				inst_and_params.Append (val1);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
				}
			}
		}

		[GLib.Signal("can_undo")]
		public event GtkSourceView.CanUndoFiredHandler CanUndoFired {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "can_undo", typeof (GtkSourceView.CanUndoFiredArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "can_undo", typeof (GtkSourceView.CanUndoFiredArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CanRedoFiredVMDelegate (IntPtr buffer, bool can_redo);

		static CanRedoFiredVMDelegate CanRedoFiredVMCallback;

		static void canredofired_cb (IntPtr buffer, bool can_redo)
		{
			try {
				SourceBuffer buffer_managed = GLib.Object.GetObject (buffer, false) as SourceBuffer;
				buffer_managed.OnCanRedoFired (can_redo);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideCanRedoFired (GLib.GType gtype)
		{
			if (CanRedoFiredVMCallback == null)
				CanRedoFiredVMCallback = new CanRedoFiredVMDelegate (canredofired_cb);
			OverrideVirtualMethod (gtype, "can_redo", CanRedoFiredVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSourceView.SourceBuffer), ConnectionMethod="OverrideCanRedoFired")]
		protected virtual void OnCanRedoFired (bool can_redo)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (can_redo)) {
				inst_and_params.Append (val1);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
				}
			}
		}

		[GLib.Signal("can_redo")]
		public event GtkSourceView.CanRedoFiredHandler CanRedoFired {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "can_redo", typeof (GtkSourceView.CanRedoFiredArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "can_redo", typeof (GtkSourceView.CanRedoFiredArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_get_first_marker(IntPtr raw);

		public GtkSourceView.SourceMarker FirstMarker { 
			get {
				IntPtr raw_ret = gtk_source_buffer_get_first_marker(Handle);
				GtkSourceView.SourceMarker ret = GLib.Object.GetObject(raw_ret) as GtkSourceView.SourceMarker;
				return ret;
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_get_next_marker(IntPtr raw, ref Gtk.TextIter iter);

		public GtkSourceView.SourceMarker GetNextMarker(Gtk.TextIter iter) {
			IntPtr raw_ret = gtk_source_buffer_get_next_marker(Handle, ref iter);
			GtkSourceView.SourceMarker ret = GLib.Object.GetObject(raw_ret) as GtkSourceView.SourceMarker;
			return ret;
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_get_last_marker(IntPtr raw);

		public GtkSourceView.SourceMarker LastMarker { 
			get {
				IntPtr raw_ret = gtk_source_buffer_get_last_marker(Handle);
				GtkSourceView.SourceMarker ret = GLib.Object.GetObject(raw_ret) as GtkSourceView.SourceMarker;
				return ret;
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_redo(IntPtr raw);

		public void Redo() {
			gtk_source_buffer_redo(Handle);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_set_bracket_match_style(IntPtr raw, ref GtkSourceView.SourceTagStyle value);

		public GtkSourceView.SourceTagStyle BracketMatchStyle { 
			set {
				gtk_source_buffer_set_bracket_match_style(Handle, ref value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_delete_marker(IntPtr raw, IntPtr marker);

		public void DeleteMarker(GtkSourceView.SourceMarker marker) {
			gtk_source_buffer_delete_marker(Handle, marker == null ? IntPtr.Zero : marker.Handle);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_get_marker(IntPtr raw, IntPtr name);

		public GtkSourceView.SourceMarker GetMarker(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gtk_source_buffer_get_marker(Handle, native_name);
			GtkSourceView.SourceMarker ret = GLib.Object.GetObject(raw_ret) as GtkSourceView.SourceMarker;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_source_buffer_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_end_not_undoable_action(IntPtr raw);

		public void EndNotUndoableAction() {
			gtk_source_buffer_end_not_undoable_action(Handle);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_begin_not_undoable_action(IntPtr raw);

		public void BeginNotUndoableAction() {
			gtk_source_buffer_begin_not_undoable_action(Handle);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_get_prev_marker(IntPtr raw, ref Gtk.TextIter iter);

		public GtkSourceView.SourceMarker GetPrevMarker(Gtk.TextIter iter) {
			IntPtr raw_ret = gtk_source_buffer_get_prev_marker(Handle, ref iter);
			GtkSourceView.SourceMarker ret = GLib.Object.GetObject(raw_ret) as GtkSourceView.SourceMarker;
			return ret;
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_undo(IntPtr raw);

		public void Undo() {
			gtk_source_buffer_undo(Handle);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_source_buffer_get_escape_char(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_set_escape_char(IntPtr raw, uint escape_char);

		public char EscapeChar { 
			get {
				uint raw_ret = gtk_source_buffer_get_escape_char(Handle);
				char ret = GLib.Marshaller.GUnicharToChar (raw_ret);
				return ret;
			}
			set {
				gtk_source_buffer_set_escape_char(Handle, GLib.Marshaller.CharToGUnichar (value));
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_buffer_can_undo(IntPtr raw);

		public bool CanUndo() {
			bool raw_ret = gtk_source_buffer_can_undo(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_move_marker(IntPtr raw, IntPtr marker, ref Gtk.TextIter wh3r3);

		public void MoveMarker(GtkSourceView.SourceMarker marker, Gtk.TextIter wh3r3) {
			gtk_source_buffer_move_marker(Handle, marker == null ? IntPtr.Zero : marker.Handle, ref wh3r3);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_create_marker(IntPtr raw, IntPtr name, IntPtr type, ref Gtk.TextIter wh3r3);

		public GtkSourceView.SourceMarker CreateMarker(string name, string type, Gtk.TextIter wh3r3) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_type = GLib.Marshaller.StringToPtrGStrdup (type);
			IntPtr raw_ret = gtk_source_buffer_create_marker(Handle, native_name, native_type, ref wh3r3);
			GtkSourceView.SourceMarker ret = GLib.Object.GetObject(raw_ret) as GtkSourceView.SourceMarker;
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_type);
			return ret;
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_get_iter_at_marker(IntPtr raw, ref Gtk.TextIter iter, IntPtr marker);

		public void GetIterAtMarker(Gtk.TextIter iter, GtkSourceView.SourceMarker marker) {
			gtk_source_buffer_get_iter_at_marker(Handle, ref iter, marker == null ? IntPtr.Zero : marker.Handle);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_buffer_can_redo(IntPtr raw);

		public bool CanRedo() {
			bool raw_ret = gtk_source_buffer_can_redo(Handle);
			bool ret = raw_ret;
			return ret;
		}


		static SourceBuffer ()
		{
			GtkSharp.GtksourceviewSharp.ObjectManager.Initialize ();
		}
#endregion
#region Customized extensions
#line 1 "SourceBuffer.custom"
//
// Gtk.SourceView.custom - Gtk SourceView class customizations
//
// Author: Aleksey Sanin (aleksey@aleksey.com)
//
// Copyright (C) 2003 Aleksey Sanin
//
// This code is inserted after the automatically generated code.
//


[DllImport("gtksourceview-1.0")]
static extern bool gtk_source_iter_forward_search(ref Gtk.TextIter _iter, 
						 string _str,
						 int _flags,
						 out Gtk.TextIter _match_start,
						 out Gtk.TextIter _match_end,
						 ref Gtk.TextIter _limit);
public bool ForwardSearch (Gtk.TextIter iter, string str, GtkSourceView.SourceSearchFlags flags, 
			   out Gtk.TextIter match_start, out Gtk.TextIter match_end, Gtk.TextIter limit) {
	bool raw_ret = gtk_source_iter_forward_search(ref iter, str, (int) flags, out match_start, out match_end, ref limit);
	bool ret = raw_ret;
	return ret;
}



[DllImport("gtksourceview-1.0")]
static extern bool gtk_source_iter_backward_search(ref Gtk.TextIter _iter, 
						 string _str,
						 int _flags,
						 out Gtk.TextIter _match_start,
						 out Gtk.TextIter _match_end,
						 ref Gtk.TextIter _limit);
public bool BackwardSearch (Gtk.TextIter iter, string str, GtkSourceView.SourceSearchFlags flags, 
			   out Gtk.TextIter match_start, out Gtk.TextIter match_end, Gtk.TextIter limit) {
	bool raw_ret = gtk_source_iter_backward_search(ref iter, str, (int) flags, out match_start, out match_end, ref limit);
	bool ret = raw_ret;
	return ret;
}

[DllImport("gtksourceview-1.0")]
static extern IntPtr gtk_source_buffer_get_markers_in_region(IntPtr raw, ref Gtk.TextIter begin, ref Gtk.TextIter end);
                                                                                
public SourceMarker[] GetMarkersInRegion (Gtk.TextIter begin, Gtk.TextIter end) {
	IntPtr raw_ret = gtk_source_buffer_get_markers_in_region (Handle, ref begin, ref end);
	GLib.SList list = new GLib.SList (raw_ret);
	SourceMarker[] result = new SourceMarker [list.Count];
	for (int i = 0; i < list.Count; i++)
		result [i] = list [i] as SourceMarker;
	return result;
}


#endregion
	}

	internal class SourceBufferAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_source_buffer_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}

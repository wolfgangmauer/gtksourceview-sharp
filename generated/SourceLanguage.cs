// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSourceView {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[SourceLanguage]
	public class SourceLanguage : GLib.Object {

		[Obsolete]
		protected SourceLanguage(GLib.GType gtype) : base(gtype) {}
		public SourceLanguage(IntPtr raw) : base(raw) {}

		protected SourceLanguage() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TagStyleChangedVMDelegate (IntPtr language, IntPtr name);

		static TagStyleChangedVMDelegate TagStyleChangedVMCallback;

		static void tagstylechanged_cb (IntPtr language, IntPtr name)
		{
			try {
				SourceLanguage language_managed = GLib.Object.GetObject (language, false) as SourceLanguage;
				language_managed.OnTagStyleChanged (GLib.Marshaller.Utf8PtrToString (name));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideTagStyleChanged (GLib.GType gtype)
		{
			if (TagStyleChangedVMCallback == null)
				TagStyleChangedVMCallback = new TagStyleChangedVMDelegate (tagstylechanged_cb);
			OverrideVirtualMethod (gtype, "tag_style_changed", TagStyleChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSourceView.SourceLanguage), ConnectionMethod="OverrideTagStyleChanged")]
		protected virtual void OnTagStyleChanged (string name)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (name)) {
				inst_and_params.Append (val1);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
				}
			}
		}

		[GLib.Signal("tag_style_changed")]
		public event GtkSourceView.TagStyleChangedHandler TagStyleChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "tag_style_changed", typeof (GtkSourceView.TagStyleChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "tag_style_changed", typeof (GtkSourceView.TagStyleChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_source_language_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_tag_style(IntPtr raw, IntPtr tag_id);

		public GtkSourceView.SourceTagStyle GetTagStyle(string tag_id) {
			IntPtr native_tag_id = GLib.Marshaller.StringToPtrGStrdup (tag_id);
			IntPtr raw_ret = gtk_source_language_get_tag_style(Handle, native_tag_id);
			GtkSourceView.SourceTagStyle ret = GtkSourceView.SourceTagStyle.New (raw_ret);
			GLib.Marshaller.Free (native_tag_id);
			return ret;
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_id(IntPtr raw);

		public string Id { 
			get {
				IntPtr raw_ret = gtk_source_language_get_id(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_language_set_tag_style(IntPtr raw, IntPtr tag_id, ref GtkSourceView.SourceTagStyle style);

		public void SetTagStyle(string tag_id, GtkSourceView.SourceTagStyle style) {
			IntPtr native_tag_id = GLib.Marshaller.StringToPtrGStrdup (tag_id);
			gtk_source_language_set_tag_style(Handle, native_tag_id, ref style);
			GLib.Marshaller.Free (native_tag_id);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_tag_default_style(IntPtr raw, IntPtr tag_id);

		public GtkSourceView.SourceTagStyle GetTagDefaultStyle(string tag_id) {
			IntPtr native_tag_id = GLib.Marshaller.StringToPtrGStrdup (tag_id);
			IntPtr raw_ret = gtk_source_language_get_tag_default_style(Handle, native_tag_id);
			GtkSourceView.SourceTagStyle ret = GtkSourceView.SourceTagStyle.New (raw_ret);
			GLib.Marshaller.Free (native_tag_id);
			return ret;
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_section(IntPtr raw);

		public string Section { 
			get {
				IntPtr raw_ret = gtk_source_language_get_section(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = gtk_source_language_get_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_style_scheme(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_language_set_style_scheme(IntPtr raw, IntPtr scheme);

		public GtkSourceView.SourceStyleScheme StyleScheme { 
			get {
				IntPtr raw_ret = gtk_source_language_get_style_scheme(Handle);
				GtkSourceView.SourceStyleScheme ret = GtkSourceView.SourceStyleSchemeAdapter.GetObject (raw_ret, false);
				return ret;
			}
			set {
				gtk_source_language_set_style_scheme(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_source_language_get_escape_char(IntPtr raw);

		public char EscapeChar { 
			get {
				uint raw_ret = gtk_source_language_get_escape_char(Handle);
				char ret = GLib.Marshaller.GUnicharToChar (raw_ret);
				return ret;
			}
		}


		static SourceLanguage ()
		{
			GtkSharp.GtksourceviewSharp.ObjectManager.Initialize ();
		}
#endregion
#region Customized extensions
#line 1 "SourceLanguage.custom"

		[DllImport("gtksourceview-1.0")]
		static extern IntPtr gtk_source_language_get_tags(IntPtr raw);

	 	public SourceTag[] Tags {
                        get {
                                IntPtr raw_ret = gtk_source_language_get_tags(Handle);
                                GLib.SList list = new GLib.SList(raw_ret);
				SourceTag[] result = new SourceTag [list.Count];
				for (int i = 0; i < list.Count; i++)
					result [i] = list [i] as SourceTag;
				return result;	
                        }
                }

		[DllImport("gtksourceview-1.0")]
		static extern IntPtr gtk_source_language_get_mime_types(IntPtr raw);
                                                                                
		[DllImport("gtksourceview-1.0")]
		static extern void gtk_source_language_set_mime_types(IntPtr raw, IntPtr mime_types);

		public string[] MimeTypes {
                        get {
                                IntPtr raw_ret = gtk_source_language_get_mime_types(Handle);
                                GLib.SList list = new GLib.SList(raw_ret);
				string[] result = new string [list.Count];
				for (int i = 0; i < list.Count; i++)
					result [i] = list [i] as string;
				return result;	
			}
			set {
				GLib.SList list = new GLib.SList (typeof (string));
				foreach (string s in value)
					list.Append (s);
				gtk_source_language_set_mime_types (Handle, list.Handle);
			}
		}

#endregion
	}

	internal class SourceLanguageAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_source_language_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}

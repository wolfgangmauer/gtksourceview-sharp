// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSourceView {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GLib.GTypeOpaque]
	public class SourceRegex : GLib.Opaque {

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_regex_search(IntPtr raw, IntPtr text, int pos, int length, ref GtkSourceView.SourceBufferMatch match, uint options);

		public int Search(string text, int pos, int length, GtkSourceView.SourceBufferMatch match, uint options) {
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			int raw_ret = gtk_source_regex_search(Handle, native_text, pos, length, ref match, options);
			int ret = raw_ret;
			GLib.Marshaller.Free (native_text);
			return ret;
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_regex_compile(IntPtr pattern);

		public static GtkSourceView.SourceRegex Compile(string pattern) {
			IntPtr native_pattern = GLib.Marshaller.StringToPtrGStrdup (pattern);
			IntPtr raw_ret = gtk_source_regex_compile(native_pattern);
			GtkSourceView.SourceRegex ret = raw_ret == IntPtr.Zero ? null : (GtkSourceView.SourceRegex) GLib.Opaque.GetOpaque (raw_ret, typeof (GtkSourceView.SourceRegex), false);
			GLib.Marshaller.Free (native_pattern);
			return ret;
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_regex_match(IntPtr raw, IntPtr text, int pos, int len, uint options);

		public bool Match(string text, int pos, int len, uint options) {
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			bool raw_ret = gtk_source_regex_match(Handle, native_text, pos, len, options);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_text);
			return ret;
		}

		public SourceRegex(IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_regex_destroy(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gtk_source_regex_destroy (raw);
		}

#endregion
	}
}

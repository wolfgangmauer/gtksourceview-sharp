// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSourceView {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[SourcePrintJob]
	public class SourcePrintJob : GLib.Object {

		[Obsolete]
		protected SourcePrintJob(GLib.GType gtype) : base(gtype) {}
		public SourcePrintJob(IntPtr raw) : base(raw) {}

		protected SourcePrintJob() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_source_print_job_get_print_numbers(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_job_set_print_numbers(IntPtr raw, uint interval);

		[GLib.Property ("print_numbers")]
		public uint PrintNumbers {
			get  {
				uint raw_ret = gtk_source_print_job_get_print_numbers(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_job_set_print_numbers(Handle, value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_source_print_job_get_tabs_width(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_job_set_tabs_width(IntPtr raw, uint tabs_width);

		[GLib.Property ("tabs_width")]
		public uint TabsWidth {
			get  {
				uint raw_ret = gtk_source_print_job_get_tabs_width(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_job_set_tabs_width(Handle, value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_print_job_get_highlight(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_job_set_highlight(IntPtr raw, bool highlight);

		[GLib.Property ("highlight")]
		public bool Highlight {
			get  {
				bool raw_ret = gtk_source_print_job_get_highlight(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_job_set_highlight(Handle, value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_print_job_get_buffer(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_job_set_buffer(IntPtr raw, IntPtr buffer);

		[GLib.Property ("buffer")]
		public GtkSourceView.SourceBuffer Buffer {
			get  {
				IntPtr raw_ret = gtk_source_print_job_get_buffer(Handle);
				GtkSourceView.SourceBuffer ret = GLib.Object.GetObject(raw_ret) as GtkSourceView.SourceBuffer;
				return ret;
			}
			set  {
				gtk_source_print_job_set_buffer(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_print_job_get_font(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_job_set_font(IntPtr raw, IntPtr font_name);

		[GLib.Property ("font")]
		public string Font {
			get  {
				IntPtr raw_ret = gtk_source_print_job_get_font(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_print_job_set_font(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_print_job_get_header_footer_font(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_job_set_header_footer_font(IntPtr raw, IntPtr font_name);

		[GLib.Property ("header_footer_font")]
		public string HeaderFooterFont {
			get  {
				IntPtr raw_ret = gtk_source_print_job_get_header_footer_font(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_print_job_set_header_footer_font(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_print_job_get_print_header(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_job_set_print_header(IntPtr raw, bool setting);

		[GLib.Property ("print_header")]
		public bool PrintHeader {
			get  {
				bool raw_ret = gtk_source_print_job_get_print_header(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_job_set_print_header(Handle, value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_print_job_get_numbers_font(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_job_set_numbers_font(IntPtr raw, IntPtr font_name);

		[GLib.Property ("numbers_font")]
		public string NumbersFont {
			get  {
				IntPtr raw_ret = gtk_source_print_job_get_numbers_font(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_print_job_set_numbers_font(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_print_job_get_wrap_mode(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_job_set_wrap_mode(IntPtr raw, int wrap);

		[GLib.Property ("wrap_mode")]
		public Gtk.WrapMode WrapMode {
			get  {
				int raw_ret = gtk_source_print_job_get_wrap_mode(Handle);
				Gtk.WrapMode ret = (Gtk.WrapMode) raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_job_set_wrap_mode(Handle, (int) value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_print_job_get_print_footer(IntPtr raw);

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_job_set_print_footer(IntPtr raw, bool setting);

		[GLib.Property ("print_footer")]
		public bool PrintFooter {
			get  {
				bool raw_ret = gtk_source_print_job_get_print_footer(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_job_set_print_footer(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void BeginPageVMDelegate (IntPtr job);

		static BeginPageVMDelegate BeginPageVMCallback;

		static void beginpage_cb (IntPtr job)
		{
			try {
				SourcePrintJob job_managed = GLib.Object.GetObject (job, false) as SourcePrintJob;
				job_managed.OnBeginPage ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideBeginPage (GLib.GType gtype)
		{
			if (BeginPageVMCallback == null)
				BeginPageVMCallback = new BeginPageVMDelegate (beginpage_cb);
			OverrideVirtualMethod (gtype, "begin_page", BeginPageVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSourceView.SourcePrintJob), ConnectionMethod="OverrideBeginPage")]
		protected virtual void OnBeginPage ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			}
		}

		[GLib.Signal("begin_page")]
		public event System.EventHandler BeginPage {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "begin_page");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "begin_page");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void FinishedVMDelegate (IntPtr job);

		static FinishedVMDelegate FinishedVMCallback;

		static void finished_cb (IntPtr job)
		{
			try {
				SourcePrintJob job_managed = GLib.Object.GetObject (job, false) as SourcePrintJob;
				job_managed.OnFinished ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideFinished (GLib.GType gtype)
		{
			if (FinishedVMCallback == null)
				FinishedVMCallback = new FinishedVMDelegate (finished_cb);
			OverrideVirtualMethod (gtype, "finished", FinishedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSourceView.SourcePrintJob), ConnectionMethod="OverrideFinished")]
		protected virtual void OnFinished ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			}
		}

		[GLib.Signal("finished")]
		public event System.EventHandler Finished {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "finished");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "finished");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_job_set_text_margins(IntPtr raw, double top, double bottom, double left, double right);

		public void SetTextMargins(double top, double bottom, double left, double right) {
			gtk_source_print_job_set_text_margins(Handle, top, bottom, left, right);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_print_job_print_range_async(IntPtr raw, ref Gtk.TextIter start, ref Gtk.TextIter end);

		public bool PrintRangeAsync(Gtk.TextIter start, Gtk.TextIter end) {
			bool raw_ret = gtk_source_print_job_print_range_async(Handle, ref start, ref end);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_job_set_footer_format(IntPtr raw, IntPtr left, IntPtr center, IntPtr right, bool separator);

		public void SetFooterFormat(string left, string center, string right, bool separator) {
			IntPtr native_left = GLib.Marshaller.StringToPtrGStrdup (left);
			IntPtr native_center = GLib.Marshaller.StringToPtrGStrdup (center);
			IntPtr native_right = GLib.Marshaller.StringToPtrGStrdup (right);
			gtk_source_print_job_set_footer_format(Handle, native_left, native_center, native_right, separator);
			GLib.Marshaller.Free (native_left);
			GLib.Marshaller.Free (native_center);
			GLib.Marshaller.Free (native_right);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_print_job_get_type();

		static GLib.GType _gtype = new GLib.GType (gtk_source_print_job_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_source_print_job_get_page(IntPtr raw);

		public uint Page { 
			get {
				uint raw_ret = gtk_source_print_job_get_page(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_job_set_header_format(IntPtr raw, IntPtr left, IntPtr center, IntPtr right, bool separator);

		public void SetHeaderFormat(string left, string center, string right, bool separator) {
			IntPtr native_left = GLib.Marshaller.StringToPtrGStrdup (left);
			IntPtr native_center = GLib.Marshaller.StringToPtrGStrdup (center);
			IntPtr native_right = GLib.Marshaller.StringToPtrGStrdup (right);
			gtk_source_print_job_set_header_format(Handle, native_left, native_center, native_right, separator);
			GLib.Marshaller.Free (native_left);
			GLib.Marshaller.Free (native_center);
			GLib.Marshaller.Free (native_right);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_job_get_text_margins(IntPtr raw, out double top, out double bottom, out double left, out double right);

		public void GetTextMargins(out double top, out double bottom, out double left, out double right) {
			gtk_source_print_job_get_text_margins(Handle, out top, out bottom, out left, out right);
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_source_print_job_get_page_count(IntPtr raw);

		public uint PageCount { 
			get {
				uint raw_ret = gtk_source_print_job_get_page_count(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_job_cancel(IntPtr raw);

		public void Cancel() {
			gtk_source_print_job_cancel(Handle);
		}


		static SourcePrintJob ()
		{
			GtkSharp.GtksourceviewSharp.ObjectManager.Initialize ();
		}
#endregion
#region Customized extensions
#line 1 "SourcePrintJob.custom"
// SourcePrintJob.custom - Gtk SourcePrintJob class customizations
//
// Author: Mike Kestner (mkestner@novell.com)
//
// Copyright (C) 2007 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[Obsolete ("Replaced by SetupFromView")]
		public GtkSourceView.SourceView upFromView { 
			set {
				gtk_source_print_job_setup_from_view(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("gtksourceview-1.0")]
		static extern void gtk_source_print_job_setup_from_view(IntPtr raw, IntPtr view);

		public void SetupFromView(GtkSourceView.SourceView view) 
		{
			gtk_source_print_job_setup_from_view(Handle, view == null ? IntPtr.Zero : view.Handle);
		}

#endregion
	}

	internal class SourcePrintJobAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("gtksourceview-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_print_job_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gtk_source_print_job_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
